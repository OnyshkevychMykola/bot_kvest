require('dotenv').config();
const cron = require('node-cron');
const { Telegraf } = require('telegraf');
const mongoose = require('mongoose');
const moment = require('moment-timezone');
const bot = new Telegraf(process.env.BOT_TOKEN);

mongoose.connect(process.env.MONGO_URI);

const userTimeZone = 'Europe/Kyiv';
const MINUTES_INTERVAL = 1;

const ObrGame = mongoose.model('ObrGame', new mongoose.Schema({
  sponsorId: { type: Number, required: true },
  name: { type: String, required: true, maxlength: 20 },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: false },
  duration: { type: Number, required: true, min: 30, max: 120 },
  prize: { type: Number, required: true, min: 50, max: 1000 },
  hunters: { type: [Number], default: [] },
  createdAt: { type: Date, default: Date.now },
  status: { type: String, required: true, maxlength: 20 },
  result: { type: String, required: false, maxlength: 20 },
  rounds: { type: Number, required: true },
  currentRound: { type: Number, default: 0 },
}));

const userSessions = {};
const userLocations = {};

bot.telegram.setMyCommands([
  { command: 'caught', description: '–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —Å–µ–±–µ —è–∫ —Å–ø—ñ–π–º–∞–Ω–æ–≥–æ' },
  { command: 'create_obrgame', description: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É' }
]);

bot.start(async (ctx) => {
  const args = ctx.message.text.split(" ");
  if (args.length > 1 && args[1].startsWith("join_")) {
    const gameId = args[1].replace("join_", "");
    await handleJoinGame(ctx, gameId);
  } else {
    ctx.reply("–í—ñ—Ç–∞—é! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_obrgame –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏.");
  }
});

bot.command('create_obrgame', (ctx) => {
  ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä–∏ (–Ω–µ –±—ñ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª—ñ–≤):');
  userSessions[ctx.from.id] = { step: 'awaiting_obrgame_name', sponsorId: ctx.from.id };
});

bot.command("caught", async (ctx) => {
  const sponsorId = ctx.from.id;
  const activeGame = await ObrGame.findOne({
    sponsorId,
    status: "processed",
  });

  if (!activeGame) {
    return ctx.reply("–í–∏ –Ω–µ —î —Å–ø–æ–Ω—Å–æ—Ä–æ–º –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä–∏ –∞–±–æ –≥—Ä–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
  }

  activeGame.status = "ended";
  activeGame.result = "hunters-win";
  await activeGame.save();

  bot.telegram.sendMessage(
    sponsorId,
    `‚ùå –í–∏ —Å–ø—ñ–π–º–∞–Ω—ñ! –ì—Ä–∞ "${activeGame.name}" –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –ø–µ—Ä–µ–º–æ–≥–æ—é –º–∏—Å–ª–∏–≤—Ü—ñ–≤.`
  );

  for (let hunterId of activeGame.hunters) {
    bot.telegram.sendMessage(
      hunterId,
      `üèÜ –í—ñ—Ç–∞—î–º–æ! –í–∏ —Å–ø—ñ–π–º–∞–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ —É –≥—Ä—ñ "${activeGame.name}". –ü–µ—Ä–µ–º–æ–≥–∞ –∑–∞ –º–∏—Å–ª–∏–≤—Ü—è–º–∏!`
    );
  }
});

bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const session = userSessions[userId];
  if (!session) return;

  if (session.step === 'awaiting_obrgame_name') {
    if (ctx.message.text.length > 20) {
      return ctx.reply('–ù–∞–∑–≤–∞ –≥—Ä–∏ –º–∞—î –±—É—Ç–∏ –Ω–µ –¥–æ–≤—à–µ 20 —Å–∏–º–≤–æ–ª—ñ–≤! –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É:');
    }

    session.name = ctx.message.text;
    session.step = 'awaiting_start_date';
    return ctx.reply('–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM):');
  }

  if (session.step === 'awaiting_start_date') {
    if (!/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}$/.test(ctx.message.text)) {
      return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: YYYY-MM-DD HH:MM');
    }

    const date = moment.tz(ctx.message.text, "YYYY-MM-DD HH:mm", userTimeZone);
    if (!date.isValid()) {
      return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∞ –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30 –ª—é—Ç–æ–≥–æ ‚Äì –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ).');
    }

    if (date.isBefore(moment())) {
      return ctx.reply('–î–∞—Ç–∞ –≤–∂–µ –º–∏–Ω—É–ª–∞. –í–≤–µ–¥—ñ—Ç—å –º–∞–π–±—É—Ç–Ω—ñ–π —á–∞—Å.');
    }
    session.startDate = date;
    session.step = 'awaiting_duration';
    return ctx.reply('–í–∫–∞–∂—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≥—Ä–∏ (–≤—ñ–¥ 30 –¥–æ 120 —Ö–≤, –∫—Ä–∞—Ç–Ω–æ 10 —Ö–≤):');
  }

  if (session.step === 'awaiting_duration') {
    const duration = parseInt(ctx.message.text);
    if (isNaN(duration) || duration < 30 || duration > 120 || duration % 10 !== 0) {
      return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å. –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 30 –¥–æ 120, –∫—Ä–∞—Ç–Ω–µ 10 —Ö–≤');
    }
    session.duration = duration;
    session.step = 'awaiting_prize';
    return ctx.reply('–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –ø—Ä–∏–∑—É (–≤—ñ–¥ 50 –¥–æ 1000 –≥—Ä–Ω, –∫—Ä–∞—Ç–Ω–æ 50 –≥—Ä–Ω):');
  }

  if (session.step === 'awaiting_prize') {
    const prize = parseInt(ctx.message.text);
    if (isNaN(prize) || prize < 50 || prize > 1000 || prize % 50 !== 0) {
      return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 50 –¥–æ 1000, –∫—Ä–∞—Ç–Ω–µ 50 –≥—Ä–Ω');
    }

    const game = await ObrGame.create({
      sponsorId: session.sponsorId,
      name: session.name,
      startDate: session.startDate,
      duration: session.duration,
      prize,
      status: 'created',
      rounds: session.duration/MINUTES_INTERVAL
    });
    delete userSessions[userId];

    const inviteLink = `https://t.me/${process.env.BOT_USERNAME}?start=join_${game._id}`;
    ctx.reply(
      `üéâ –ì—Ä–∞ "${game.name}" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n\n` +
      `üìÖ –ü–æ—á–∞—Ç–æ–∫: ${new Date(game.startDate).toLocaleString()}\n` +
      `‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${game.duration} —Ö–≤.\n` +
      `üèÜ –ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: ${prize} –≥—Ä–Ω\n\n` +
      `üîó –î–æ—î–¥–Ω–∞—Ç–∏—Å—è: ${inviteLink}\n\n` +
      `üì¢ –ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–∑—ñ–≤, —â–æ–± –≤–æ–Ω–∏ —Ç–∞–∫–æ–∂ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å! –ë—ñ–ª—å—à–µ –≥—Ä–∞–≤—Ü—ñ–≤ ‚Äì —Ü—ñ–∫–∞–≤—ñ—à–∞ –≥—Ä–∞! üéØ`
    );

    ctx.reply('üìç –©–æ–± –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –≥—Ä—ñ, –¥–æ–∑–≤–æ–ª—å—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –≤–∞—à–æ—ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:', {
      reply_markup: {
        keyboard: [[{ text: 'üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é', request_location: true }]],
        one_time_keyboard: true,
        resize_keyboard: true
      }
    });
  }
});

bot.on('location', (ctx) => {
  const userId = ctx.from.id;
  const location = ctx.message.location;

  userLocations[userId] = {
    latitude: location.latitude,
    longitude: location.longitude
  };

  ctx.reply('‚úÖ –í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞! –ú–∏ –±—É–¥–µ–º–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω.');
});

bot.command("join", async (ctx) => {
  const args = ctx.message.text.split(" ");
  if (args.length < 2) return ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –≥—Ä–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /join 12345");

  const gameId = args[1];
  await handleJoinGame(ctx, gameId);
});

async function handleJoinGame(ctx, gameId) {
  const game = await ObrGame.findById(gameId);
  if (!game) return ctx.reply("–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");

  if (game.sponsorId === ctx.from.id) {
    return ctx.reply("–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —è–∫ –º–∏—Å–ª–∏–≤–µ—Ü—å.");
  }

  if (!game.hunters.includes(ctx.from.id)) {
    game.hunters.push(ctx.from.id);
    await game.save();
  }

  ctx.reply("–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä–∏!");
}

cron.schedule('* * * * *', async () => {
  const now = moment.tz(userTimeZone).toDate();

  const gamesToStart = await ObrGame.find({
    startDate: { $lte: now },
    status: 'created'
  });
  for (let game of gamesToStart) {
    game.status = 'processed';
    game.endDate = moment.tz(game.startDate, userTimeZone).add(game.duration, "minutes").toDate();
    game.currentRound = 1;
    await game.save();
    startGame(game);

    const sponsorLocation = userLocations[game.sponsorId];

    if (!sponsorLocation) {
      game.status = 'ended';
      game.result = 'sponsor-disqualified';
      await game.save();

      endGameDueToDisqualification(game);
      continue;
    }

    for (let hunterId of [...game.hunters, game.sponsorId]) {
      bot.telegram.sendLocation(hunterId, sponsorLocation.latitude, sponsorLocation.longitude);
      bot.telegram.sendMessage(
          hunterId,
          `üìç –°–ø–æ–Ω—Å–æ—Ä –∑–∞—Ä–∞–∑ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç—É—Ç!\n–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–æ—à—É–∫–∏!`
      );
    }
  }

  const activeGames = await ObrGame.find({ status: 'processed' });

  for (let game of activeGames) {
    if (game.endDate <= now) {
      game.status = 'ended';
      game.result = 'sponsor-win';
      await game.save();
      endGame(game);
      continue;
    }

    const nextRoundTime = moment.tz(game.startDate, userTimeZone).add(game.currentRound * MINUTES_INTERVAL, "minutes").toDate();

    if (nextRoundTime <= now) {
      game.currentRound += 1;
      await game.save();

      const sponsorLocation = userLocations[game.sponsorId];

      if (!sponsorLocation) {
        game.status = 'ended';
        game.result = 'sponsor-disqualified';
        await game.save();

        endGameDueToDisqualification(game);
        continue;
      }

      for (let hunterId of [...game.hunters, game.sponsorId]) {
        bot.telegram.sendLocation(hunterId, sponsorLocation.latitude, sponsorLocation.longitude);
        bot.telegram.sendMessage(
            hunterId,
            `üìç –°–ø–æ–Ω—Å–æ—Ä –∑–∞—Ä–∞–∑ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç—É—Ç!\n–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–æ—à—É–∫–∏!`
        );
      }
    }
  }
});

function startGame(game) {
  bot.telegram.sendMessage(game.sponsorId, `üéÆ –ì—Ä–∞ "${game.name}" —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å!
–í–∞—à–∞ –º–µ—Ç–∞ ‚Äì —Ö–æ–≤–∞—Ç–∏—Å—è —è–∫–æ–º–æ–≥–∞ –¥–æ–≤—à–µ. –ß–∞—Å –≥—Ä–∏: ${game.duration} —Ö–≤.`);

  for (let hunterId of game.hunters) {
    bot.telegram.sendMessage(hunterId, `üéØ –ì—Ä–∞ "${game.name}" —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å!
–ó–Ω–∞–π–¥—ñ—Ç—å —ñ —Å–ø—ñ–π–º–∞–π—Ç–µ —Å–ø–æ–Ω—Å–æ—Ä–∞ —è–∫–æ–º–æ–≥–∞ —à–≤–∏–¥—à–µ! –ß–∞—Å –≥—Ä–∏: ${game.duration} —Ö–≤.`);
  }
}

function endGame(game) {
  bot.telegram.sendMessage(game.sponsorId, `üèÜ –í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ –≥—Ä—É "${game.name}"!
–í–∏ –∑–º–æ–≥–ª–∏ –∑–∞–ª–∏—à–∏—Ç–∏—Å—è –Ω–µ–ø–æ–º—ñ—á–µ–Ω–∏–º –¥–æ –∫—ñ–Ω—Ü—è –≥—Ä–∏.`);

  for (let hunterId of game.hunters) {
    bot.telegram.sendMessage(hunterId, `‚ùå –ì—Ä–∞ "${game.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
–ù–∞ –∂–∞–ª—å, –≤–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –≤–ø—ñ–π–º–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ —Ü—å–æ–≥–æ —Ä–∞–∑—É.`);
  }

  game.save();
}

function endGameDueToDisqualification(game) {
  bot.telegram.sendMessage(game.sponsorId, `‚ùå –í–∏ –±—É–ª–∏ –¥–∏—Å–∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —É –≥—Ä—ñ "${game.name}" —á–µ—Ä–µ–∑ –Ω–µ–≤–∫–∞–∑–∞–Ω—É –ª–æ–∫–∞—Ü—ñ—é.`);

  for (let hunterId of game.hunters) {
    bot.telegram.sendMessage(hunterId, `üèÜ –í—ñ—Ç–∞—î–º–æ! –ì—Ä–∞ "${game.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —ñ –≤–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏, –æ—Å–∫—ñ–ª—å–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä –±—É–≤ –¥–∏—Å–∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π.`);
  }

  game.save();
}


bot.launch();
