const { deleteUserSession, getUserSession, updateUserSession } = require('./services/session');
const moment = require('moment-timezone');
const { createGame } = require('./services/games');
const { botName, userTimeZone } = require('./constants');

async function handleGameNameInput(ctx, userId) {
  if (ctx.message.text.length > 20) {
    return ctx.reply('–ù–∞–∑–≤–∞ –≥—Ä–∏ –º–∞—î –±—É—Ç–∏ –Ω–µ –¥–æ–≤—à–µ 20 —Å–∏–º–≤–æ–ª—ñ–≤! –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É:');
  }

  await updateUserSession(userId, { name: ctx.message.text, step: 'awaiting_start_date' });
  const nowPlusOneHour = getFormattedFutureTime(1);
  return ctx.reply(
    `–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM). –ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>${nowPlusOneHour}</code>`,
    { parse_mode: 'HTML' }
  );
}

async function handleStartDateInput(ctx, userId) {
  if (!isValidDateFormat(ctx.message.text)) {
    return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: YYYY-MM-DD HH:MM');
  }

  const date = parseDate(ctx.message.text);
  if (!date.isValid() || date.isBefore(moment())) {
    return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∞ –∞–±–æ –º–∏–Ω—É–ª–∞ –¥–∞—Ç–∞. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –º–∞–π–±—É—Ç–Ω—ñ–π —á–∞—Å.');
  }

  await updateUserSession(userId, { startDate: date, step: 'awaiting_duration' });
  return ctx.reply('–í–∫–∞–∂—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≥—Ä–∏ (–≤—ñ–¥ 30 –¥–æ 120 —Ö–≤, –∫—Ä–∞—Ç–Ω–æ 10 —Ö–≤):');
}

async function handleDurationInput(ctx, userId) {
  const duration = parseInt(ctx.message.text);
  if (!isValidDuration(duration)) {
    return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å. –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 30 –¥–æ 120, –∫—Ä–∞—Ç–Ω–µ 10 —Ö–≤');
  }

  await updateUserSession(userId, { duration, step: 'awaiting_prize' });
  return ctx.reply('–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –ø—Ä–∏–∑—É (–≤—ñ–¥ 50 –¥–æ 1000 –≥—Ä–Ω, –∫—Ä–∞—Ç–Ω–æ 50 –≥—Ä–Ω):');
}

async function handlePrizeInput(ctx, userId) {
  const prize = parseInt(ctx.message.text);
  if (!isValidPrize(prize)) {
    return ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 50 –¥–æ 1000, –∫—Ä–∞—Ç–Ω–µ 50 –≥—Ä–Ω');
  }

  const session = await getUserSession(userId);
  const game = await createGame({
    sponsorId: session.sponsorId,
    name: session.name,
    startDate: session.startDate,
    duration: session.duration,
    prize
  });

  await deleteUserSession(userId);
  return sendGameCreatedMessage(ctx, game);
}

function getFormattedFutureTime(hours) {
  return moment.tz(userTimeZone).add(hours, 'hour').format('YYYY-MM-DD HH:mm');
}

function isValidDateFormat(text) {
  return /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}$/.test(text);
}

function parseDate(text) {
  return moment.tz(text, 'YYYY-MM-DD HH:mm', userTimeZone);
}

function isValidDuration(duration) {
  return !isNaN(duration) && duration >= 30 && duration <= 120 && duration % 10 === 0;
}

function isValidPrize(prize) {
  return !isNaN(prize) && prize >= 50 && prize <= 1000 && prize % 50 === 0;
}

function sendGameCreatedMessage(ctx, game) {
  const inviteLink = `https://t.me/${botName}?start=join_${game._id}`;
  ctx.reply(
    `üéâ –ì—Ä–∞ "${game.name}" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n\n` +
    `üìÖ –ü–æ—á–∞—Ç–æ–∫: ${new Date(game.startDate).toLocaleString()}\n` +
    `‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${game.duration} —Ö–≤.\n` +
    `üèÜ –ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: ${game.prize} –≥—Ä–Ω\n\n` +
    `üîó –î–æ—î–¥–Ω–∞—Ç–∏—Å—è: ${inviteLink}\n\n` +
    `üì¢ –ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–∑—ñ–≤, —â–æ–± –≤–æ–Ω–∏ —Ç–∞–∫–æ–∂ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å! –ë—ñ–ª—å—à–µ –≥—Ä–∞–≤—Ü—ñ–≤ ‚Äì —Ü—ñ–∫–∞–≤—ñ—à–∞ –≥—Ä–∞! üéØ`
  );

  ctx.reply('üìç –©–æ–± –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –≥—Ä—ñ, –¥–æ–∑–≤–æ–ª—å—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –≤–∞—à–æ—ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:', {
    reply_markup: {
      keyboard: [[{ text: 'üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é', request_location: true }]],
      one_time_keyboard: true,
      resize_keyboard: true
    }
  });
}

module.exports = {
  handleGameNameInput,
  handleStartDateInput,
  handleDurationInput,
  handlePrizeInput
}
